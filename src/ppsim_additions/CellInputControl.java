package ppsim_additions;

import java.util.ArrayList;

import autogenerated_sim.Functions;
import autogenerated_sim.LTiModule;
import autogenerated_sim.LTin_Module;
import sim.engine.SimState;
import sim.engine.Steppable;
import sim.engine.Stoppable;
import sim.util.Double2D;
import simulation_main.Mason_Sim_Main;

/**
 * Class to control the functionality at each step of the simulation.  
 * (a) migration of LTin and LTi cells to the tract.  As a number of these cells enter per step, 
 * the best way to control migration was to have a class which is Steppable and manages this migration. From the start, LTin cells will migrate at a given rate per step and for a certain number of steps. 
 * LTi cells will then follow after a set delay, at a set rate, for a set time period
 * (b) generation of statistics per step (all saved to a csv file)
 * (c) division of LTo cells when this becomes necessary
 * (d) growth of the intestine tract as becomes necessary per step
 * 
 * Done this way to limit the need for a large number of steppable classes
 * 
 * @author Kieran Alden
 *
 */
public class CellInputControl implements Steppable,Stoppable {

	private static final long serialVersionUID = 1L;
	
	public int ltinCellsThisStep;
	public int ltiCellsThisStep;
	
	// For testing, cell position will be read in from array
	public ArrayList<Double2D> ltin_positions = ltin_cell_position_arraylist();
	public ArrayList<Double2D> lti_positions = lti_cell_position_arraylist();
	
	// KA Check why these and cellularity counts are here
	public int ltinCellCount = 0;
	public int ltiCellCount = 0;
	
	
	
	/**
	 * Flag which counts the 'parts' of LTi cells created by the input rate at each step, when 1 is reached that cell is also created
	 */
	double ltiInFlag = 0;
	
	/**
	 * Flag which counts the 'parts' of LTin cells created by the input rate at each step, when 1 is reached that cell is also created
	 */
	double ltinInFlag = 0;
	
	/**
	 * Rate at which LTin cells will be added over time
	 */
	private double lTinInputRate;
	
	/**
	 * Rate at which LTi cells will be added over time
	 */
	private double lTiInputRate;
	
	/**
	 * Current number of LTin cells. Used to create an id for the cell
	 */
	public int lTinCellularity = 0;
	
	/**
	 * Current number of LTi cells. Used to create an id for the cell
	 */
	public int lTiCellularity = 0;
	
	/**
	 * Creates the class and schedules this to run at each step
	 * @param schedule	The current simulation schedule
	 */
	//public CellInputControl(Schedule schedule,SimParameters2 sp,PPatchSim ppsim)
	public CellInputControl()
	{	
		this.calculateCellPopulationFigures();

	}
	
	/**
	 * Calculates the number of LTin and LTi cells on the tract at E15.5 (from percentages gathered experimentally), and from this generates an input
	 * rate for both cell types
	 * 
	 */
	public void calculateCellPopulationFigures()
	{
		// Firstly, need to calculate the cell input rates from the E15.5 FACS data
		// Work out how many cells would fill all of the available area:
		//System.out.println(ppsim.simParams.initialGridLength);
		//System.out.println(ppsim.simParams.HCELL_DIAMETER);
		//System.out.println(ppsim.simParams.initialGridHeight);
		double totalHCells = ((((int)(Mason_Sim_Main.simParams.initialGridLength/Mason_Sim_Main.simParams.HCELL_DIAMETER)*(int)(Mason_Sim_Main.simParams.initialGridHeight/Mason_Sim_Main.simParams.HCELL_DIAMETER))));
		
		// Now work out what the required number of LTin cells at E15.5 would be 
		double numLTin15pt5 = (totalHCells / 100)*Mason_Sim_Main.simParams.percentLTinfromFACStain;
		
		// Now work out the required number of LTi Cells at E15.5
		double numLTi15pt5 = (totalHCells / 100)*Mason_Sim_Main.simParams.percentLTifromFACStain;
		
		// Now calculate the input rates to achieve this number over a 24 hour period (E14.5-E15.5)
		this.lTinInputRate = numLTin15pt5/(24*60);
		this.lTiInputRate = numLTi15pt5/(24*60);
	}
	
	
	
		
	/**
	 * Adds the required number of LTin or LTi cells to the simulation in this step as set by the input rate
	 * 
	 * @param ppsim	The current simulation
	 * @param cellType	Type of cell being created (LTin or LTi)
	 * @param inputRate	The input rate per step for this cell type at this time point
	 */
	public void createCell(String cellType)
	{
		//Operations cell_ops = new Operations();
				
		//Cells agent = null;
		//boolean collision = true;
		Double2D loc = null;
			
		// KA: Removed the collision check for the moment, may need to reexamine
		//while(collision)
		//{
			// CALCULATE WHERE THE CELL WILL ENTER
			// THE PARAMETER inputCircumferencePercentage CAN RESTRICT WHERE CELLS ENTER
			// THIS TESTS WHETHER THERE IS A SET RANGE WHERE LTIN/LTI CELLS MIGRATE INTO THE TRACT
			Double x,y;
			
			// In testing we have predetermined the position of each cell, so we ignore this
			if(!Mason_Sim_Main.set_cell_start_positions)
			{
				
				if(Mason_Sim_Main.simParams.inputCircumferencePercentage != 100)
				{
					// Calculate the available circumference area
					Double rangeHeight = (Mason_Sim_Main.simParams.currentGridHeight/100)*Mason_Sim_Main.simParams.inputCircumferencePercentage;
					// Get a random y variable somewhere in this shortened area
					double rangeY =  Mason_Sim_Main.rng.nextDouble()*rangeHeight;
					
						
					// Now need to adjust so this range is centered around the centre of the simulation space.
					// Using the middle ensures no cells roll around the screen straight away when a range is used
					// Calculate the lower lim y coord
					// divided by 2 as half of the input range goes above midpoint in environment, half below
					Double midpoint = Mason_Sim_Main.simParams.currentGridHeight/2;
					Double lowlim = midpoint - ((Mason_Sim_Main.simParams.currentGridHeight/100)*(Mason_Sim_Main.simParams.inputCircumferencePercentage/2));
						
					// Now adjust the y parameter to base it around the middle
					y = lowlim + rangeY;
						
					// Calculate a random x
					x =  Mason_Sim_Main.rng.nextDouble()*Mason_Sim_Main.simParams.currentGridLength;
				}
				else
				{
					// Just work out random position in whole environment
					
					x =  Mason_Sim_Main.rng.nextDouble()*Mason_Sim_Main.simParams.currentGridLength;
					y =  Mason_Sim_Main.rng.nextDouble()*Mason_Sim_Main.simParams.currentGridHeight;
					
				}
					
				// Set the location of the cell to these coordinates
				loc = new Double2D(x,y);
			}
				
			// Make the cell at this location 
			// KA 4/12/17: Have had to split out the makeCell method, as LTin and LTi are no longer a subclass of Cells:
			//agent = this.makeCell(ppsim,loc, cellType);
		
			if(cellType.equals("LTin"))
			{
				if(Mason_Sim_Main.set_cell_start_positions)
				{
					loc = this.ltin_positions.get(this.ltinCellCount);
					this.ltinCellCount++;
				}
					
				//System.out.println("Initialising LTin");
				LTin_Module robo = new LTin_Module();
				robo.Init();
				robo.getLTin_Module_LTin_Step().LTin_Step_LTin_Attributes.cell_id = Mason_Sim_Main.agent_store.num_cells_created;
				Mason_Sim_Main.agent_store.num_cells_created++;
				Mason_Sim_Main.agent_store.allCells.put(robo.getLTin_Module_LTin_Step().LTin_Step_LTin_Attributes.cell_id, robo);
				
				robo.getLTin_Module_LTin_Step().LTin_Step_LTin_Attributes.cellSpeed = Functions.set_cell_speed(Mason_Sim_Main.rng.nextDouble(), Mason_Sim_Main.simParams.cellSpeedMinLowBound, Mason_Sim_Main.simParams.cellSpeedMinUpBound);
				robo.getLTin_Module_LTin_Step().LTin_Step_LTin_Attributes.LTin_loc = loc;
				
				Mason_Sim_Main.sim_env.tract.setObjectLocation(robo, robo.getLTin_Module_LTin_Step().LTin_Step_LTin_Attributes.LTin_loc);
				robo.setStopper(Mason_Sim_Main.state.schedule.scheduleRepeating(robo,Mason_Sim_Main.agent_store.ltin_scheduler_ref,1));
				Mason_Sim_Main.agent_store.ltin_scheduler_ref++;
				
				// KA CHANGE THIS BACK TOO AFTER DEBUGGING
				//if(ppsim.inTrackingPeriod) 
				//if(ppsim.schedule.getSteps() < (PPsim_robocalc_main.simParams.trackingSnapStartHr*60)
				//		&& PPsim_robocalc_main.simParams.cellTrackingEnabled)	// no point adding the cell if tracking has ended
				//{
					//System.out.println("^^^^^^^^^^^^^^^^^^^^^Time: "+ppsim.schedule.getSteps()+" Adding LTin to Away");
					// Set Track Start Location
					robo.getLTin_Module_LTin_Step().LTin_Step_LTin_Attributes.tracking.agentTrackStartLocation = robo.getLTin_Module_LTin_Step().LTin_Step_LTin_Attributes.LTin_loc;
					// Add the cell to the list
					// KA: FOR TESTING WE'RE STARTING ALL LTIN CELLS IN THE CLOSE BAG
					//if(cellType.equals("LTin"))
					//{
					//	PPsim_robocalc_main.trackedCells_Close.add(robo);
					//	robo.initialise_close_trace_file(robo.ltin_Attributes.cellID, PPsim_robocalc_main.simParams.trackingSnapStartHr);
					//}
					//else
					Mason_Sim_Main.agent_store.trackedCells_Away.add(robo);
				//}
					Mason_Sim_Main.agent_store.ltin_cells_created++;
				
				ltinCellsThisStep = ltinCellsThisStep+1;
				
			}
			else
			{
				if(Mason_Sim_Main.set_cell_start_positions)
				{
					loc = this.lti_positions.get(this.ltiCellCount);
					this.ltiCellCount++;
				}
				
				//System.out.println("Initialising LTi");
				LTiModule robo = new LTiModule();
				robo.Init();
				robo.getLTiModule_LTiStep().LTiStep_LTi_Attributes.cell_id = Mason_Sim_Main.agent_store.num_cells_created;
				Mason_Sim_Main.agent_store.num_cells_created++;
				Mason_Sim_Main.agent_store.allCells.put(robo.getLTiModule_LTiStep().LTiStep_LTi_Attributes.cell_id, robo);
				robo.getLTiModule_LTiStep().LTiStep_LTi_Attributes.cellSpeed = Functions.set_cell_speed(Mason_Sim_Main.rng.nextDouble(), Mason_Sim_Main.simParams.cellSpeedMinLowBound, Mason_Sim_Main.simParams.cellSpeedMinUpBound);
				robo.getLTiModule_LTiStep().LTiStep_LTi_Attributes.LTi_loc = loc;
				
				Mason_Sim_Main.sim_env.tract.setObjectLocation(robo, robo.getLTiModule_LTiStep().LTiStep_LTi_Attributes.LTi_loc);
				robo.setStopper(Mason_Sim_Main.state.schedule.scheduleRepeating(robo,Mason_Sim_Main.agent_store.lti_scheduler_ref,1));
				Mason_Sim_Main.agent_store.lti_scheduler_ref++;
				
				
				//if(ppsim.inTrackingPeriod)
				//if(ppsim.schedule.getSteps() < (PPsim_robocalc_main.simParams.trackingSnapStartHr*60)
				//		&& PPsim_robocalc_main.simParams.cellTrackingEnabled)	// no point adding the cell if tracking has ended
				//{
					//System.out.println("^^^^^^^^^^^^^^^^^^^^^Time: "+ppsim.schedule.getSteps()+" Adding LTi to Away");
					// Set Track Start Location
					robo.getLTiModule_LTiStep().LTiStep_LTi_Attributes.tracking.agentTrackStartLocation = robo.getLTiModule_LTiStep().LTiStep_LTi_Attributes.LTi_loc;
					// Add the cell to the list
					Mason_Sim_Main.agent_store.trackedCells_Away.add(robo);
				//}
					Mason_Sim_Main.agent_store.lti_cells_created++;
				
				ltiCellsThisStep = ltiCellsThisStep+1;
			//}

			// KA: removed this for the moment, may need to be reexamined
			//collision = agent.ltiltinCollision(ppsim.tract);
		
		}
		
				
		// determine if this cell should be expressing RET Ligand (based on a probability)
		// choose a random number between 1 and 100
		// KA: removed this as we never used it experimentally, and would just complicate things here
			
		//if(probabilityLTinLTiRETLigands>0)
		//{
			//int num = ppsim.random.nextInt(100);
				
			//if(num<probabilityLTinLTiRETLigands)	// the cell will be expressing RET ligand
			//{
			//	agent.expressingRETLigand = true;
			//}
		//}
			
		// Now there are guarantees as to no collisions, add this cell to the tract and to the scheduler
		// Now included in the if loop above:
		//ppsim.tract.setObjectLocation(agent,loc);
		//agent.setStopper(sch.scheduleRepeating(agent));
			
		// add this cell to the list of those being tracked if tracking has started
		// The cell tracking class removes any which have been tracked for over than an hour
		//if(ppsim.schedule.getSteps()*secondsPerStep < ((trackingSnapStartHr*60)*60) 
		//		&& cellTrackingEnabled)	// no point adding the cell if tracking has ended
		//{
			// Set Track Start Location
			//agent.agentTrackStartLocation = agent.agentLocation;
			// Add the cell to the list
			//ppsim..add(agent);
		//}
	}
	
	/**
	 * Creates either an LTi or LTin cell at the given location
	 * @param loc	The location where the cell should be placed
	 * @param cellType	The type of cell being created (LTin or LTi)
	 * @return Cells agent - the LTin or LTi cell
	 */ 
	
	// Had to go in RoboCalc version, as LTin and LTi not extend Cells
	/*public Cells makeCell(PPatchSim ppsim,Double2D loc,String cellType)
	{
		Cells agent;
		if(cellType.equals("LTin"))
		{
			agent = new LTin(loc,simParams);
			simParams.lTinCellularity++;
		}
		else
		{
			agent = new LTi(loc,simParams);
			simParams.lTiCellularity++;
		
			ppsim.allLTis.add(agent);
		}

		return agent;
	}*/
	
	/**
	 * Adds the number of LTin cells required for a particular timestep to the simulation
	 * @param ppsim	The current simulation state
	 **/
	public void addLTinCells()
	{
		double reqLTinCells =0; //required number of cells at point in time as predicted by graph
		double lTinCellsPrev = 0; //number of cells one step previous
		double steps = 0;
		steps = Mason_Sim_Main.state.schedule.getSteps();	
	
		if (Mason_Sim_Main.simParams.lTinInputRateGraphType.equalsIgnoreCase("exp"))
		{
		//exponential graphs	
			reqLTinCells = Math.pow(Mason_Sim_Main.simParams.lTinInputRateGraphConstant,steps); //from equation: y=1.00345^x to get 168 cells at 24 hours.
			lTinCellsPrev = Math.pow(Mason_Sim_Main.simParams.lTinInputRateGraphConstant,(steps-1)); //work out the required number of cells by getting the number at one previous step
			lTinInputRate = reqLTinCells - lTinCellsPrev;
		}
		else if (Mason_Sim_Main.simParams.lTinInputRateGraphType.equalsIgnoreCase("sqrt"))
		{
		// inverse exponentials using square root
			reqLTinCells = Math.pow(Mason_Sim_Main.simParams.lTinInputRateGraphConstant*steps, 0.5); //from equation: y=sqrt(20.5x) to get 168 cells at 24 hours.
			lTinCellsPrev = Math.pow(Mason_Sim_Main.simParams.lTinInputRateGraphConstant*(steps-1), 0.5); //work out the required number of cells by getting the number at one previous step
			lTinInputRate = reqLTinCells - lTinCellsPrev;
		}
		// if the graphType is not either of these, the lTiInputRate will remain the default constant rate.
		
	// inverse exponentials using natural log -- not used as takes too long
	/*	double logVar = 0;
		double logPrev = 0;			
		logVar = Math.pow(steps, 22.8);
		logPrev = Math.pow(steps-1, 22.8);
		reqLTiCells = Math.log(logVar); //from equation: y=ln(x^22.8) to get 168 cells at 24 hours.
		lTiCellsPrev = Math.log(logPrev);//work out the required number of cells by getting the number at one previous step
	*/	
		
		// add the cell if rate is a whole number
		for(int i=0;i<(int)lTinInputRate;i++)
		{
			this.createCell("LTin");
		}
		
		// deal with decimal input rates
		if(lTinInputRate%1 > 0)
		{	
			// add the decimal/remainder to the flag, and when one is reached, add that cell
			ltinInFlag = ltinInFlag+(lTinInputRate%1);
			//System.out.println(ltinInFlag);
			if(ltinInFlag>=1)
			{
				//System.out.println(ppsim.schedule.getSteps());
				this.createCell("LTin");
				// take the cell from the flag
				ltinInFlag = ltinInFlag-1;
			}
		}
		
	}
	
	/**
	 * Adds the number of LTi cells required for a particular timestep to the simulation
	 * @param ppsim	The current simulation state
	 */
	public void addLTiCells()
	{
		double reqLTiCells =0; //required number of cells at point in time as predicted by graph
		double lTiCellsPrev = 0; //number of cells one step previous
		double steps = 0;
		steps = Mason_Sim_Main.state.schedule.getSteps();	
	
		if(Mason_Sim_Main.simParams.lTiInputRateGraphType.equalsIgnoreCase("exp"))
		{
		//exponential graphs	
			reqLTiCells = Math.pow(Mason_Sim_Main.simParams.lTiInputRateGraphConstant,steps); //from equation: y=1.00345^x to get 168 cells at 24 hours.
			lTiCellsPrev = Math.pow(Mason_Sim_Main.simParams.lTiInputRateGraphConstant,(steps-1)); //work out the required number of cells by getting the number at one previous step
			lTiInputRate = reqLTiCells - lTiCellsPrev;
		}
		else if (Mason_Sim_Main.simParams.lTiInputRateGraphType.equalsIgnoreCase("sqrt"))
		{
		// inverse exponentials using square root
			reqLTiCells = Math.pow(Mason_Sim_Main.simParams.lTiInputRateGraphConstant*steps, 0.5); //from equation: y=sqrt(20.5x) to get 168 cells at 24 hours.
			lTiCellsPrev = Math.pow(Mason_Sim_Main.simParams.lTiInputRateGraphConstant*(steps-1), 0.5); //work out the required number of cells by getting the number at one previous step
			lTiInputRate = reqLTiCells - lTiCellsPrev;
		}
		// if the graphType is not either of these, the lTiInputRate will remain the default constant rate.
		
	// inverse exponentials using natural log -- not used as takes too long
	/*	double logVar = 0;
		double logPrev = 0;			
		logVar = Math.pow(steps, 22.8);
		logPrev = Math.pow(steps-1, 22.8);
		reqLTiCells = Math.log(logVar); //from equation: y=ln(x^22.8) to get 168 cells at 24 hours.
		lTiCellsPrev = Math.log(logPrev);//work out the required number of cells by getting the number at one previous step
	*/	
		
		
		// add the cell if rate is a whole number
		for(int i=0;i<(int)lTiInputRate;i++)
		{
			this.createCell("LTi");
		}
		
		// deal with decimal input rates
		if(lTiInputRate%1 > 0)
		{
			// add the decimal/remainder to the flag, and when one is reached, add that cell
			ltiInFlag = ltiInFlag+(lTiInputRate%1);
			//System.out.println(ltiInFlag);
			if(ltiInFlag>=1)
			{
				//System.out.println(ppsim.schedule.getSteps());
				this.createCell("LTi");
				// take the cell from the flag
				ltiInFlag = ltiInFlag-1;
			}
		}
		
	}
	
	/*public void step(final SimState state)
	{
		PPsim_robocalc_main ppsim = (PPsim_robocalc_main)state;
		
		if(ppsim.schedule.getSteps() == 50)
		{
			System.out.println("Introduced at Step 3");
			LTiModule lti = new LTiModule(new Double2D(120,70), new Operations(), ppsim ,1);
			lti.Init();
			ppsim.tract.setObjectLocation(lti, lti.lti_Attrs.loc);
			lti.setStopper(ppsim.schedule.scheduleRepeating(lti));
			system_parameters.allLTis.add(lti);
			PPsim_robocalc_main..add(lti);
			lti.lti_Attrs.agentTrackStartLocation = lti.lti_Attrs.loc;
			System.out.println("Speed: "+lti.lti_Attrs.cellSpeed);
		}
	}*/

	/**
	 * Adds the required number of cells (LTin and LTi) per step, adjusts the input rates if required, takes twelve our snaps if necessary, triggers LTo cell
	 * division, and resizes the tract if necessary. All done for every simulation step
	 */
	public void step(final SimState state)
	{		
		ltinCellsThisStep = 0;
		ltiCellsThisStep = 0;
		
		if(state.schedule.getSteps()<(Mason_Sim_Main.simParams.simulationTime))
		{	
			if(state.schedule.getSteps()<(Mason_Sim_Main.simParams.lTinInputTime*60))
			{
				this.addLTinCells();
			}
			else
			{
				// set the input rate to zero to stop cell input
				lTinInputRate=0;

			}
			
			// LTi
			// check delay
			if(state.schedule.getSteps() >(Mason_Sim_Main.simParams.lTiInputDelayTime*60))
			{
				// delay has been passed - LTi cells enter
			
				if(state.schedule.getSteps()<(Mason_Sim_Main.simParams.lTiInputDelayTime+Mason_Sim_Main.simParams.lTiInputTime)*60)
				{
					this.addLTiCells();
					
				}
				else
				{
					// input time has passed - set the rate to zero
					lTiInputRate = 0;
					
				}
			}

			
			// KA: Not used in robocalc version
			// Take a snap of the tract if required (could have been done elsewhere, but saves an extra steppable class
			//if(simParams.twelveHourSnaps)
			//	ppsim.captureTrackImage.takeDisplaySnaps(ppsim);	
			
			// Take a snap if within a period where each step is being imaged
			//if(simParams.stepBystepTrackingImages)
			//	ppsim.captureTrackImage.timePeriodImaging(ppsim);
			
			// Examine to see if the tract needs to be resized for this step
			//ppsim.tractSizeControl.adjustTractSize(ppsim);
			
			// Determine if the LTo cells need to be divided
			//ppsim.ltoCellDivision.lToCellDivision();
			// FROM APRIL 2018 - CELL DIVISION IS A STEPPABLE OF ITS OWN - HELPS DEBUGGING
			
			//ppsim.writer.println(ppsim.schedule.getSteps()+","+ltinCellsThisStep+","+ltinInFlag+","+ltiCellsThisStep+","+ltiInFlag);
			
		}
		else
		{	
			this.stop();
			//ppsim.writer.close();
		}
	}
	
	/**
	 * Flag to show if this class has been stopped (i.e. no more cell entry)
	 */
	private Stoppable stopper = null;
	
	/**
	 * Function to set the stopper
	 * @param stopper	Whether the class has been stopped or not
	 */
    public void setStopper(Stoppable stopper)   {this.stopper = stopper;}
    
    /**
     * Function to stop the class 
     */
    public void stop(){stopper.stop();}
    
    public ArrayList<Double2D> ltin_cell_position_arraylist()
    {
    	ArrayList<Double2D> ltin_positions = new ArrayList<Double2D>();
    	ltin_positions.add(new Double2D(311.77941709060207,187.5931790818432));
    	ltin_positions.add(new Double2D(266.3257616833,222.65207530585334));
    	ltin_positions.add(new Double2D(266.53369268782626,101.14535131662187));
    	ltin_positions.add(new Double2D(66.30935266927729,249.26264435530948));
    	ltin_positions.add(new Double2D(656.5382315792374,200.29312767895368));
    	ltin_positions.add(new Double2D(383.2638633619452,205.46783259977184));
    	ltin_positions.add(new Double2D(582.2067845645827,89.3632342247596));
    	ltin_positions.add(new Double2D(169.5806100977764,62.36193670269965));
    	ltin_positions.add(new Double2D(512.5787308632994,232.76389102154167));
    	ltin_positions.add(new Double2D(669.7098883991893,105.86449513344147));
    	ltin_positions.add(new Double2D(105.75528161614221,120.34634949914832));
    	ltin_positions.add(new Double2D(679.1786911847018,163.39468402310965));
    	ltin_positions.add(new Double2D(504.0491017946066,5.511743882588023));
    	ltin_positions.add(new Double2D(661.0995857899331,24.00914424849327));
    	ltin_positions.add(new Double2D(18.4915195775432,181.31924684711078));
    	ltin_positions.add(new Double2D(215.47642377542283,107.69685305824564));
    	ltin_positions.add(new Double2D(258.2176841097152,251.6301684925745));
    	ltin_positions.add(new Double2D(19.004344621336354,52.19701314908974));
    	ltin_positions.add(new Double2D(601.3173560994019,14.98202924760925));
    	ltin_positions.add(new Double2D(445.5605385918059,188.88383177864515));
    	ltin_positions.add(new Double2D(319.6859675733754,10.005693604354159));
    	ltin_positions.add(new Double2D(311.21135829932,83.17858443999168));
    	ltin_positions.add(new Double2D(291.4832866738247,154.63639371140493));
    	ltin_positions.add(new Double2D(408.456585086414,46.073459275311954));
    	ltin_positions.add(new Double2D(289.9482169354765,51.69399223169746));
    	ltin_positions.add(new Double2D(677.0154599151334,249.84771301211984));
    	ltin_positions.add(new Double2D(248.29791855728865,214.4445978663934));
    	ltin_positions.add(new Double2D(290.9283623711723,114.25907880251694));
    	ltin_positions.add(new Double2D(141.23340537492058,96.14433449851488));
    	ltin_positions.add(new Double2D(423.2159958665801,9.490209702999866));
    	ltin_positions.add(new Double2D(63.18708766021317,9.721432316828677));
    	ltin_positions.add(new Double2D(8.689466807757151,101.25668734330041));
    	ltin_positions.add(new Double2D(492.26285748082404,88.90761368433895));
    	ltin_positions.add(new Double2D(68.93347428615924,18.05381075005188));
    	ltin_positions.add(new Double2D(372.18836016634,43.45024683628412));
    	ltin_positions.add(new Double2D(215.42088355178763,238.55637006764587));
    	ltin_positions.add(new Double2D(671.9922679517482,12.108904420069468));
    	ltin_positions.add(new Double2D(27.00794648967506,9.252231706680305));
    	ltin_positions.add(new Double2D(627.6099692291267,151.54111084671018));
    	ltin_positions.add(new Double2D(499.15031446803397,80.44355659871428));
    	ltin_positions.add(new Double2D(498.8192956038139,26.547795607574336));
    	ltin_positions.add(new Double2D(272.35207680309935,42.91217462198368));
    	ltin_positions.add(new Double2D(646.5058181378741,183.97926606159623));
    	ltin_positions.add(new Double2D(243.90075740187623,244.56784872736978));
    	ltin_positions.add(new Double2D(414.73171173935333,3.270443476332656));
    	ltin_positions.add(new Double2D(589.1690367001651,96.90535272744323));
    	ltin_positions.add(new Double2D(6.691171509783422,67.62732674965073));
    	ltin_positions.add(new Double2D(328.9077453200716,114.20799238974563));
    	ltin_positions.add(new Double2D(655.3498214794814,19.31624271529966));
    	ltin_positions.add(new Double2D(0.5792824682641196,239.03400281917743));
    	ltin_positions.add(new Double2D(573.8433940330259,59.99689028755464));
    	ltin_positions.add(new Double2D(177.39174400913004,149.59238027603863));
    	ltin_positions.add(new Double2D(269.01790210094373,41.046170102856166));
    	ltin_positions.add(new Double2D(490.2854693657797,226.69377217370132));
    	ltin_positions.add(new Double2D(402.2157376311562,151.47769530857664));
    	ltin_positions.add(new Double2D(252.8623467255016,32.038717194340585));
    	ltin_positions.add(new Double2D(500.03506174699174,164.65234911533815));
    	ltin_positions.add(new Double2D(156.52278856450704,96.14080562315961));
    	ltin_positions.add(new Double2D(154.02594661967981,223.19155446642662));
    	ltin_positions.add(new Double2D(327.22108167977905,206.21819089519093));
    	ltin_positions.add(new Double2D(457.89377533788087,227.50005341048276));
    	ltin_positions.add(new Double2D(533.0326273021769,241.87348103390335));
    	ltin_positions.add(new Double2D(135.38660475971784,251.9931955693269));
    	ltin_positions.add(new Double2D(567.9784976932259,209.07726915530517));
    	ltin_positions.add(new Double2D(47.24478251421967,149.0231660127618));
    	ltin_positions.add(new Double2D(247.79757185818332,135.28761720566692));
    	ltin_positions.add(new Double2D(94.94365100134166,125.03157653217903));
    	ltin_positions.add(new Double2D(47.93104542633183,67.20665897480532));
    	ltin_positions.add(new Double2D(219.7502862553795,231.57543419900844));
    	ltin_positions.add(new Double2D(94.39566152615562,54.06714352723188));
    	ltin_positions.add(new Double2D(77.39648794411677,6.140928210768347));
    	ltin_positions.add(new Double2D(629.2932697545815,122.55842884002858));
    	ltin_positions.add(new Double2D(467.3410092691618,53.64331759160672));
    	ltin_positions.add(new Double2D(191.2341005802972,170.65635938289432));
    	ltin_positions.add(new Double2D(394.370843905936,109.89869175375655));
    	ltin_positions.add(new Double2D(329.05985505900526,166.50281190036065));
    	ltin_positions.add(new Double2D(294.09375646554753,90.02719757962143));
    	ltin_positions.add(new Double2D(673.727659821959,201.14088964286384));
    	ltin_positions.add(new Double2D(492.13357424644914,157.9353140226761));
    	ltin_positions.add(new Double2D(35.597155591078476,78.0428340946069));
    	ltin_positions.add(new Double2D(667.1499475256115,65.1202208944707));
    	ltin_positions.add(new Double2D(596.2283530259535,229.97509295932358));
    	ltin_positions.add(new Double2D(530.9763165957033,198.7957373726467));
    	ltin_positions.add(new Double2D(90.70418770153665,117.81341293539192));
    	ltin_positions.add(new Double2D(76.74156875150594,80.58478365900268));
    	ltin_positions.add(new Double2D(460.1685913100036,127.72892127392086));
    	ltin_positions.add(new Double2D(109.97575208622192,1.5983840081809402));
    	ltin_positions.add(new Double2D(657.7632448735612,133.9041316108351));
    	ltin_positions.add(new Double2D(222.41889781779724,172.75960183097393));
    	ltin_positions.add(new Double2D(431.3212969735155,183.12152921619912));
    	ltin_positions.add(new Double2D(222.53880258332336,243.8729313266762));
    	ltin_positions.add(new Double2D(529.3019487851336,46.511065721144234));
    	ltin_positions.add(new Double2D(387.8096950646127,201.37385030474547));
    	ltin_positions.add(new Double2D(490.45864358681365,212.22395782210265));
    	ltin_positions.add(new Double2D(53.11603087869524,232.61706460276667));
    	ltin_positions.add(new Double2D(97.66403324093706,100.89546093143515));
    	ltin_positions.add(new Double2D(556.408167182565,30.94940076999863));
    	ltin_positions.add(new Double2D(675.7216146278108,195.07471424929528));
    	ltin_positions.add(new Double2D(374.5659462716114,172.55929816593223));
    	ltin_positions.add(new Double2D(345.62416755333726,84.24943169463383));
    	ltin_positions.add(new Double2D(546.5959956165887,248.99730094678512));
    	ltin_positions.add(new Double2D(220.3153911946391,140.3061177262568));
    	ltin_positions.add(new Double2D(122.37806172904276,27.603269386557002));
    	ltin_positions.add(new Double2D(171.71395586747016,134.38572063280793));
    	ltin_positions.add(new Double2D(36.4649492103234,47.75478516867079));
    	ltin_positions.add(new Double2D(546.8016345203016,70.56220844319638));
    	ltin_positions.add(new Double2D(63.59472130164407,196.8434597991308));
    	ltin_positions.add(new Double2D(205.44285321930403,40.33130487241235));
    	ltin_positions.add(new Double2D(299.9253882324777,215.64767805457853));
    	ltin_positions.add(new Double2D(229.85952425540046,229.06593211611485));
    	ltin_positions.add(new Double2D(423.28479162046847,46.35725287115779));
    	ltin_positions.add(new Double2D(592.3598764856638,182.97278306048366));
    	ltin_positions.add(new Double2D(428.6364588354977,17.014108945757922));
    	ltin_positions.add(new Double2D(331.11642584977056,250.83919265545234));
    	ltin_positions.add(new Double2D(473.6891370655681,138.3785780671289));
    	ltin_positions.add(new Double2D(504.5442051237067,247.007165803756));
    	ltin_positions.add(new Double2D(323.4328014854114,79.64179268093909));
    	ltin_positions.add(new Double2D(422.35028462863136,29.551047297672557));
    	ltin_positions.add(new Double2D(177.07413202493305,200.96734940008037));
    	ltin_positions.add(new Double2D(262.44367571665873,225.1069123521441));
    	ltin_positions.add(new Double2D(620.2320582516705,92.63356378604827));
    	ltin_positions.add(new Double2D(378.6476003253737,145.53741958621004));
    	ltin_positions.add(new Double2D(326.1331127469965,178.18581941131902));
    	ltin_positions.add(new Double2D(140.1758910751892,216.17989922656685));
    	ltin_positions.add(new Double2D(406.7747282143807,15.496057809585189));
    	ltin_positions.add(new Double2D(458.2936066837809,5.3495623282210465));
    	ltin_positions.add(new Double2D(280.1798808535803,69.69198033089593));
    	ltin_positions.add(new Double2D(35.43256088432049,57.47253578671916));
    	ltin_positions.add(new Double2D(562.4541557432183,225.02698383809545));
    	ltin_positions.add(new Double2D(220.688759514673,216.49669628313205));
    	ltin_positions.add(new Double2D(213.20853697017003,111.29402142305722));
    	ltin_positions.add(new Double2D(570.1933663571247,12.838799339094233));
    	ltin_positions.add(new Double2D(262.9845883039939,229.19775752832933));
    	ltin_positions.add(new Double2D(600.7652124199832,63.37820156338076));
    	ltin_positions.add(new Double2D(455.3046519231527,224.4015181758415));
    	ltin_positions.add(new Double2D(650.1298208300419,197.9909183599536));
    	ltin_positions.add(new Double2D(425.0435010317861,182.37061725634047));
    	ltin_positions.add(new Double2D(647.7468641974455,166.66797014036922));
    	ltin_positions.add(new Double2D(498.0087464104352,99.07091625908525));
    	ltin_positions.add(new Double2D(32.75029899112983,187.06314911613927));
    	ltin_positions.add(new Double2D(488.88793719488103,69.39350740176054));
    	ltin_positions.add(new Double2D(113.80740923533644,186.52765947717944));
    	ltin_positions.add(new Double2D(614.6340896562607,89.88942778163475));
    	ltin_positions.add(new Double2D(544.8375954901668,73.89549482832));
    	ltin_positions.add(new Double2D(274.04983238147685,152.62742513667942));
    	ltin_positions.add(new Double2D(433.2502786528484,11.548945100702024));
    	ltin_positions.add(new Double2D(82.61651303546114,158.03369990949423));
    	ltin_positions.add(new Double2D(305.3115095169861,184.38741119882815));
    	ltin_positions.add(new Double2D(25.074599129783216,66.53532154590854));
    	ltin_positions.add(new Double2D(500.94828923720513,114.94990980693757));
    	ltin_positions.add(new Double2D(646.2620564564486,108.37465468449649));
    	ltin_positions.add(new Double2D(537.7797078939614,158.95144151175012));
    	ltin_positions.add(new Double2D(694.6809995710423,203.7143804780388));
    	ltin_positions.add(new Double2D(601.2895221748315,10.758691941361091));
    	ltin_positions.add(new Double2D(261.1864705448131,10.821694760153823));
    	ltin_positions.add(new Double2D(274.50090891404835,17.049518391420346));
    	ltin_positions.add(new Double2D(93.33527451213637,16.116418108252287));
    	ltin_positions.add(new Double2D(434.65548752134174,45.34483391189469));
    	ltin_positions.add(new Double2D(434.2721861057326,32.71955396038129));
    	ltin_positions.add(new Double2D(682.8054873655678,89.84839631261873));
    	ltin_positions.add(new Double2D(575.9723669125794,56.79801037639307));
    	ltin_positions.add(new Double2D(396.166292261268,64.76204681698775));
    	ltin_positions.add(new Double2D(688.6372249769571,202.35830852589643));
    	ltin_positions.add(new Double2D(341.87072261842115,230.49220981291205));
    	ltin_positions.add(new Double2D(614.2804075090587,145.24445735451167));
    	ltin_positions.add(new Double2D(27.659838981626528,236.31878474116607));
    	ltin_positions.add(new Double2D(121.60936022799565,33.96464315403846));
    	ltin_positions.add(new Double2D(659.1058651934515,62.442977307362966));
    	ltin_positions.add(new Double2D(626.4685217139441,143.87581707363682));
    	ltin_positions.add(new Double2D(357.3564881340821,245.69846764568516));
    	ltin_positions.add(new Double2D(82.09028556554154,8.580875088356002));
    	ltin_positions.add(new Double2D(3.2832030731856365,48.1887916559005));
    	ltin_positions.add(new Double2D(210.4387892994912,166.10969807731578));
    	ltin_positions.add(new Double2D(692.9405434964385,112.02285997359407));
    	ltin_positions.add(new Double2D(678.3679446189942,7.564628647713866));
    	ltin_positions.add(new Double2D(413.72302321290545,135.52428521458523));
    	ltin_positions.add(new Double2D(596.6250599808111,206.74088113385318));
    	ltin_positions.add(new Double2D(303.2834929429396,151.08019831701378));
    	ltin_positions.add(new Double2D(400.8531562235923,229.7435513147367));
    	ltin_positions.add(new Double2D(137.11261596025713,62.39297287009289));
    	ltin_positions.add(new Double2D(15.945219435654368,24.466204025126395));
    	ltin_positions.add(new Double2D(476.611738413826,53.67437088666961));
    	ltin_positions.add(new Double2D(149.75472182999036,154.04428448846662));
    	ltin_positions.add(new Double2D(380.20585440510143,58.992548987404334));
    	ltin_positions.add(new Double2D(558.4420728727075,10.421409152317674));
    	ltin_positions.add(new Double2D(654.029129544397,80.78180602804439));
    	ltin_positions.add(new Double2D(193.84821563597308,34.92030471982203));
    	ltin_positions.add(new Double2D(128.5691237290562,166.49885269712397));
    	ltin_positions.add(new Double2D(329.6436078281865,137.17254904943232));
    	ltin_positions.add(new Double2D(494.06080767282964,9.42259689374607));
    	ltin_positions.add(new Double2D(532.9397653071914,174.90112958490718));
    	ltin_positions.add(new Double2D(356.20682591268326,183.37867298420903));
    	ltin_positions.add(new Double2D(611.0850020114674,152.30423868160238));
    	ltin_positions.add(new Double2D(591.4153191505317,123.20917773476602));
    	ltin_positions.add(new Double2D(401.33457866034746,184.77120418799694));
    	ltin_positions.add(new Double2D(179.27131191786992,160.22511217723482));
    	ltin_positions.add(new Double2D(504.7875451494972,64.03206187912414));
    	ltin_positions.add(new Double2D(613.4197385792353,107.63587338471933));
    	ltin_positions.add(new Double2D(61.83043250389163,137.86844381958662));
    	ltin_positions.add(new Double2D(260.416512896609,28.705976316555542));
    	return(ltin_positions);
    }
    
    public ArrayList<Double2D> lti_cell_position_arraylist()
    {
    	ArrayList<Double2D> lti_positions = new ArrayList<Double2D>();
    	lti_positions.add(new Double2D(616.8542996776816,150.12128556703502));
    	lti_positions.add(new Double2D(89.03962540167414,102.93746442767535));
    	lti_positions.add(new Double2D(15.028461837078744,253.87059516547316));
    	lti_positions.add(new Double2D(554.2541464369277,62.673361730399776));
    	lti_positions.add(new Double2D(68.85506060131874,158.1634976630374));
    	lti_positions.add(new Double2D(62.816774526135674,214.87632283326317));
    	lti_positions.add(new Double2D(60.43562289913954,142.0890819869378));
    	lti_positions.add(new Double2D(401.1747587869026,130.60732560493776));
    	lti_positions.add(new Double2D(21.394564323900322,15.972151769396415));
    	lti_positions.add(new Double2D(149.9975191036387,31.812515686690848));
    	lti_positions.add(new Double2D(427.155607286864,161.1917557255001));
    	lti_positions.add(new Double2D(524.7457402343592,147.99133757664984));
    	lti_positions.add(new Double2D(497.87175293665626,157.38261216914242));
    	lti_positions.add(new Double2D(503.70437230148957,36.28378566991386));
    	lti_positions.add(new Double2D(7.2757414272283665,208.2644997564368));
    	lti_positions.add(new Double2D(581.7116735126649,11.782427829524709));
    	lti_positions.add(new Double2D(540.4464527856014,59.309666528128105));
    	lti_positions.add(new Double2D(412.86386718619036,199.9309479790877));
    	lti_positions.add(new Double2D(512.7173011226096,54.071205133339525));
    	lti_positions.add(new Double2D(107.95289719809928,125.45089500766417));
    	lti_positions.add(new Double2D(605.564663178502,218.42077158149993));
    	lti_positions.add(new Double2D(313.8046368169816,218.36106144096362));
    	lti_positions.add(new Double2D(532.3962869778156,97.33798681825924));
    	lti_positions.add(new Double2D(627.3132124345481,219.0358785811004));
    	lti_positions.add(new Double2D(522.0231855126361,122.6283770391118));
    	lti_positions.add(new Double2D(123.62657116902545,93.90487893208056));
    	lti_positions.add(new Double2D(686.2456639845459,226.81252322771545));
    	lti_positions.add(new Double2D(285.5884909507286,227.08073986072066));
    	lti_positions.add(new Double2D(588.1850683510424,61.802927395751055));
    	lti_positions.add(new Double2D(597.5857689377943,148.82258268614356));
    	lti_positions.add(new Double2D(46.99791038910119,250.44452887905535));
    	lti_positions.add(new Double2D(42.939821459874494,4.018050371288008));
    	lti_positions.add(new Double2D(80.85307428543527,148.85623752617946));
    	lti_positions.add(new Double2D(277.8641699065339,29.990978981657864));
    	lti_positions.add(new Double2D(609.5200415098547,144.51507039980868));
    	lti_positions.add(new Double2D(521.8974029504116,164.30110220965082));
    	lti_positions.add(new Double2D(677.9922603827985,96.45026585062044));
    	lti_positions.add(new Double2D(302.943810850048,159.69363953272745));
    	lti_positions.add(new Double2D(555.660695818417,155.6004897235396));
    	lti_positions.add(new Double2D(208.6626939688999,183.38248204307658));
    	lti_positions.add(new Double2D(600.3988506830758,17.83285904632779));
    	lti_positions.add(new Double2D(34.28998111591398,213.01102527078717));
    	lti_positions.add(new Double2D(505.2979744861859,118.65525447473613));
    	lti_positions.add(new Double2D(625.8384703547465,183.92901972371237));
    	lti_positions.add(new Double2D(176.70549971256398,79.89781056366347));
    	lti_positions.add(new Double2D(325.5248461654302,251.97013451241062));
    	lti_positions.add(new Double2D(280.34203770951854,1.6740350039610612));
    	lti_positions.add(new Double2D(471.06752885710955,209.1236066948873));
    	lti_positions.add(new Double2D(214.1108529658895,217.4261662352439));
    	lti_positions.add(new Double2D(591.3203510440484,33.73904095492961));
    	lti_positions.add(new Double2D(372.84433795386917,138.96780131263543));
    	lti_positions.add(new Double2D(155.27204656396583,73.48965566975569));
    	lti_positions.add(new Double2D(93.4784732628842,74.4963259763152));
    	lti_positions.add(new Double2D(278.34427930399414,239.14884780596944));
    	lti_positions.add(new Double2D(13.8634203492082,85.48124041977546));
    	lti_positions.add(new Double2D(438.5834864879733,184.77406888442698));
    	lti_positions.add(new Double2D(209.88592091919227,47.999756590650065));
    	lti_positions.add(new Double2D(394.8821728915754,72.82509428934415));
    	lti_positions.add(new Double2D(328.9549233075325,84.97604639647687));
    	lti_positions.add(new Double2D(346.40288831469235,245.18814632078494));
    	lti_positions.add(new Double2D(382.61192561461957,138.72185088371174));
    	lti_positions.add(new Double2D(599.7513244037114,175.56709981343255));
    	lti_positions.add(new Double2D(20.672294150768266,199.18896317338795));
    	lti_positions.add(new Double2D(228.22673672854862,253.37714689323894));
    	lti_positions.add(new Double2D(455.9642625175771,40.51946214141897));
    	lti_positions.add(new Double2D(279.7133781869613,249.20882434520897));
    	lti_positions.add(new Double2D(476.61620596569907,154.05521346209903));
    	lti_positions.add(new Double2D(43.89131000995614,85.03286665605238));
    	lti_positions.add(new Double2D(120.53710171747366,193.51604350454957));
    	lti_positions.add(new Double2D(179.33385380852346,97.21101162013613));
    	lti_positions.add(new Double2D(510.5452800130873,77.6307345405142));
    	lti_positions.add(new Double2D(427.1302562185115,251.93703219729193));
    	lti_positions.add(new Double2D(58.81678583078863,143.9180307859043));
    	lti_positions.add(new Double2D(152.9305406836319,14.96093431996419));
    	lti_positions.add(new Double2D(463.5553987499049,49.76843022927617));
    	lti_positions.add(new Double2D(301.07874301614135,228.31001175469083));
    	lti_positions.add(new Double2D(541.6776760170528,102.1841502248015));
    	lti_positions.add(new Double2D(208.38140284582175,133.91559516844984));
    	lti_positions.add(new Double2D(549.5276835953538,209.4961711903065));
    	lti_positions.add(new Double2D(73.58818309458006,232.6699424083832));
    	lti_positions.add(new Double2D(300.64075453820146,42.3341394363624));
    	lti_positions.add(new Double2D(484.9523634781393,90.65639553872579));
    	lti_positions.add(new Double2D(245.77037349829024,91.09253513308713));
    	lti_positions.add(new Double2D(470.21700261243444,78.3534700531777));
    	lti_positions.add(new Double2D(308.4420767246921,142.1078213767586));
    	lti_positions.add(new Double2D(323.1614132358031,142.32125595004226));
    	lti_positions.add(new Double2D(170.72107036900084,200.60383283067165));
    	lti_positions.add(new Double2D(598.11514247741,21.704040890680133));
    	lti_positions.add(new Double2D(673.8179332273955,179.93247015478934));
    	lti_positions.add(new Double2D(587.7996562349056,199.41481691671336));
    	lti_positions.add(new Double2D(639.9081153590631,239.44709655525202));
    	lti_positions.add(new Double2D(492.46198778153905,33.03746456568122));
    	lti_positions.add(new Double2D(66.1241773471274,62.32271085871994));
    	lti_positions.add(new Double2D(0.38612133078619326,196.28809082372834));
    	lti_positions.add(new Double2D(285.46866305542875,225.1450704884468));
    	lti_positions.add(new Double2D(588.6342786136677,31.791389356653717));
    	lti_positions.add(new Double2D(600.6654521931024,25.391303800538477));
    	lti_positions.add(new Double2D(569.7666415668663,144.07488148851283));
    	lti_positions.add(new Double2D(347.34935712884294,77.12440682059169));
    	lti_positions.add(new Double2D(547.0861953487308,100.55773875296572));
    	lti_positions.add(new Double2D(80.05365864966909,131.92178251338035));
    	lti_positions.add(new Double2D(24.802313966917765,177.21123076873099));
    	lti_positions.add(new Double2D(348.9827274336944,143.8111711205163));
    	lti_positions.add(new Double2D(395.6647011754571,68.37672527819691));
    	lti_positions.add(new Double2D(360.3081966591687,0.8130559121520462));
    	lti_positions.add(new Double2D(607.6255699886651,164.50326031622484));
    	lti_positions.add(new Double2D(234.33671434268456,164.92774725510478));
    	lti_positions.add(new Double2D(247.34221730527887,193.84071754687926));
    	lti_positions.add(new Double2D(420.7348346159152,175.39313504517634));
    	lti_positions.add(new Double2D(69.90152441529993,132.16360876576152));
    	lti_positions.add(new Double2D(255.19209253998815,177.6493824456644));
    	lti_positions.add(new Double2D(482.8807885659531,146.0335805799789));
    	lti_positions.add(new Double2D(470.21063895213547,54.54417070139164));
    	lti_positions.add(new Double2D(374.2618977512607,43.77379468958145));
    	lti_positions.add(new Double2D(607.5464062956567,56.26417035918359));
    	lti_positions.add(new Double2D(231.52400153378932,200.643018286011));
    	lti_positions.add(new Double2D(546.2165388710558,232.02382363091405));
    	lti_positions.add(new Double2D(116.76249964753511,225.51470876100373));
    	lti_positions.add(new Double2D(527.1592454698185,30.153706592657517));
    	lti_positions.add(new Double2D(276.59798467552747,151.73032619249813));
    	lti_positions.add(new Double2D(598.2423403857673,24.78412774574484));
    	lti_positions.add(new Double2D(463.672245138265,175.02033942991898));
    	lti_positions.add(new Double2D(304.8727454568404,60.56232260643058));
    	lti_positions.add(new Double2D(697.5876293867761,213.00901204459453));
    	lti_positions.add(new Double2D(126.36010688354588,251.67507647459774));
    	lti_positions.add(new Double2D(283.922334700574,46.743073094580545));
    	lti_positions.add(new Double2D(224.09151155856225,160.98004338947723));
    	lti_positions.add(new Double2D(258.3841752049863,8.690980087105666));
    	lti_positions.add(new Double2D(589.6894376737586,137.51102079108895));
    	lti_positions.add(new Double2D(77.66158501601194,252.99545623479784));
    	lti_positions.add(new Double2D(368.7802945331818,73.1678003185451));
    	lti_positions.add(new Double2D(252.6951456446375,244.70194878933347));
    	lti_positions.add(new Double2D(649.1384739686326,232.65932437036503));
    	lti_positions.add(new Double2D(25.913357346874488,80.44246557175151));
    	lti_positions.add(new Double2D(594.8753614041461,205.48256326803653));
    	lti_positions.add(new Double2D(585.9404560795388,67.67542715168449));
    	lti_positions.add(new Double2D(211.1332234630913,253.91928628808643));
    	lti_positions.add(new Double2D(448.39618383084706,91.34850779254502));
    	lti_positions.add(new Double2D(231.81429688678585,43.73065104011098));
    	lti_positions.add(new Double2D(80.95552092904185,93.41387429990183));
    	lti_positions.add(new Double2D(173.13163645866106,21.03870686038153));
    	lti_positions.add(new Double2D(215.84356888446567,62.85477405237261));
    	lti_positions.add(new Double2D(393.9800544015585,172.74670104686143));
    	lti_positions.add(new Double2D(414.4322308813114,4.708450683031668));
    	lti_positions.add(new Double2D(631.9107194426373,78.5226090707181));
    	lti_positions.add(new Double2D(285.6028206518331,9.3825909071289));
    	lti_positions.add(new Double2D(84.67855825049413,32.9395276359932));
    	lti_positions.add(new Double2D(452.1465458172201,39.19618160630428));
    	lti_positions.add(new Double2D(423.95781860255767,20.772130969347455));
    	lti_positions.add(new Double2D(7.9005474063967185,5.53582121615676));
    	lti_positions.add(new Double2D(45.85088479414009,49.54929934263507));
    	lti_positions.add(new Double2D(181.73556304157938,205.34981172359858));
    	lti_positions.add(new Double2D(200.44286277320361,21.10531559828305));
    	lti_positions.add(new Double2D(600.1420904209363,50.88173181301123));
    	lti_positions.add(new Double2D(169.1884685558564,152.61811011071822));
    	lti_positions.add(new Double2D(420.40288721863107,93.0781952882869));
    	lti_positions.add(new Double2D(693.4297650814489,85.43089938685091));
    	lti_positions.add(new Double2D(542.9047200831615,149.47503225444984));
    	lti_positions.add(new Double2D(383.49377595587663,180.3067912446005));
    	lti_positions.add(new Double2D(219.88606571460826,184.84087791010043));
    	lti_positions.add(new Double2D(373.20035303206834,186.6105729294047));
    	lti_positions.add(new Double2D(630.0989735204816,2.5371625600869194));
    	lti_positions.add(new Double2D(271.44957693660996,71.98564706067978));
    	lti_positions.add(new Double2D(247.7470476329018,173.2060281586849));
    	lti_positions.add(new Double2D(93.68439225848539,251.18881854896537));
    	lti_positions.add(new Double2D(382.94867201530747,148.83892374324012));
    	lti_positions.add(new Double2D(567.0930027378469,207.71230484091785));
    	lti_positions.add(new Double2D(645.3007921607934,38.945305991772535));
    	lti_positions.add(new Double2D(466.60979008240054,106.82139225512934));
    	lti_positions.add(new Double2D(401.6608946308088,209.93774273163024));
    	lti_positions.add(new Double2D(589.746892790911,184.97109845956325));
    	lti_positions.add(new Double2D(291.4588208099421,178.89419262113046));
    	lti_positions.add(new Double2D(499.9916874690699,141.76512619487187));
    	lti_positions.add(new Double2D(257.4623563806924,34.46664599893053));
    	lti_positions.add(new Double2D(222.58828874842948,7.394209941353347));
    	lti_positions.add(new Double2D(218.47102224049908,128.05370433332294));
    	lti_positions.add(new Double2D(121.0484432150785,205.88133940577544));
    	lti_positions.add(new Double2D(557.8087515891673,132.32805177321148));
    	lti_positions.add(new Double2D(50.64613411860876,30.289447671137705));
    	lti_positions.add(new Double2D(518.8069667516612,48.359704063069515));
    	lti_positions.add(new Double2D(51.56096860812136,140.1033738410841));
    	lti_positions.add(new Double2D(291.6173210260592,47.316824429763244));
    	lti_positions.add(new Double2D(92.0234769683656,10.658940597970547));
    	lti_positions.add(new Double2D(76.27824113081641,185.09579367303436));
    	lti_positions.add(new Double2D(188.92496786196452,17.541131028811584));
    	lti_positions.add(new Double2D(569.3895066608891,216.86023438809784));
    	lti_positions.add(new Double2D(299.1823148752126,198.5096910360566));
    	lti_positions.add(new Double2D(586.0070331173158,227.616704507485));
    	lti_positions.add(new Double2D(471.9123488001614,128.83174545362294));
    	lti_positions.add(new Double2D(226.25735684437248,165.72398803535793));
    	lti_positions.add(new Double2D(494.12546201393894,205.51521045774632));
    	lti_positions.add(new Double2D(199.14317850486844,209.39644310502354));
    	lti_positions.add(new Double2D(130.64157186817488,78.05852582523157));
    	lti_positions.add(new Double2D(123.37599765310956,151.019276476173));
    	lti_positions.add(new Double2D(292.1377726029377,233.09161803816247));
    	lti_positions.add(new Double2D(542.5048346793527,252.49538108552943));
    	lti_positions.add(new Double2D(191.52593819662658,102.35369166878154));
    	lti_positions.add(new Double2D(8.110972031761953,239.90074627474738));
    	lti_positions.add(new Double2D(56.212033201170286,30.881651316562714));
    	lti_positions.add(new Double2D(510.7129515638669,58.840593447261064));
    	lti_positions.add(new Double2D(13.712247104690512,216.97625102014382));
    	lti_positions.add(new Double2D(37.33670717277803,1.2857967073776349));
    	lti_positions.add(new Double2D(178.78688666971848,190.26947193299088));
    	lti_positions.add(new Double2D(688.5365060538907,141.73150695688773));
    	lti_positions.add(new Double2D(629.7045887329892,236.84444365039712));
    	lti_positions.add(new Double2D(518.1998601471088,114.53521130287587));
    	lti_positions.add(new Double2D(84.15113210923896,173.07479352826152));
    	lti_positions.add(new Double2D(272.5967997042353,199.38073235949497));
    	lti_positions.add(new Double2D(237.87668455106788,106.01171444303458));
    	lti_positions.add(new Double2D(403.8640610876404,132.9431521258459));
    	lti_positions.add(new Double2D(31.279905732143355,40.16444628143762));
    	lti_positions.add(new Double2D(312.6563061811427,11.198808826223894));
    	lti_positions.add(new Double2D(299.6077615896471,63.18132796269954));
    	lti_positions.add(new Double2D(536.0570444474689,211.91776667023154));
    	lti_positions.add(new Double2D(444.06024527310143,62.52624999267783));
    	lti_positions.add(new Double2D(353.12170458903825,99.85215236861454));
    	lti_positions.add(new Double2D(287.47859440388726,196.14452898945234));
    	lti_positions.add(new Double2D(500.2114180304524,25.976391088547743));
    	lti_positions.add(new Double2D(354.71417703621836,106.49257068597929));
    	lti_positions.add(new Double2D(468.36246028070906,6.813081257751146));
    	lti_positions.add(new Double2D(261.59944537721685,59.48435121887389));
    	lti_positions.add(new Double2D(502.46482037163486,237.15436649206143));
    	lti_positions.add(new Double2D(541.5505503465229,46.52115465208706));
    	lti_positions.add(new Double2D(633.136382298052,135.67132457444174));
    	lti_positions.add(new Double2D(122.49683208697448,242.66584439419972));
    	lti_positions.add(new Double2D(10.328068659292667,135.1623825422744));
    	lti_positions.add(new Double2D(223.1137554885569,166.69670177415236));
    	lti_positions.add(new Double2D(689.9575625226988,165.93639319126254));
    	lti_positions.add(new Double2D(479.2843400065417,35.413397094972446));
    	lti_positions.add(new Double2D(525.3289521299417,236.05809163153927));
    	lti_positions.add(new Double2D(534.1544186512718,16.73300363773329));
    	lti_positions.add(new Double2D(155.44813645886762,10.252161475087375));
    	lti_positions.add(new Double2D(228.20377863337563,55.540591036656465));
    	lti_positions.add(new Double2D(292.8603568005447,160.37634924131254));
    	lti_positions.add(new Double2D(629.8337933779582,15.068949511762908));
    	lti_positions.add(new Double2D(597.0878630505609,229.94040765834407));
    	lti_positions.add(new Double2D(624.9934187614264,119.08480030715782));
    	lti_positions.add(new Double2D(508.97162537605567,152.05732318611098));
    	lti_positions.add(new Double2D(649.5186998015697,243.7135455697796));
    	lti_positions.add(new Double2D(43.803027983101586,129.8840263440092));
    	lti_positions.add(new Double2D(245.45404764595102,152.4632492280498));
    	lti_positions.add(new Double2D(309.5045009855121,205.3514194010904));
    	lti_positions.add(new Double2D(148.46781920764334,41.762606310703454));
    	lti_positions.add(new Double2D(259.02323317317365,49.350287046290426));
    	lti_positions.add(new Double2D(241.53439428816472,246.78843640306295));
    	lti_positions.add(new Double2D(492.6724352588081,164.372797349251));
    	lti_positions.add(new Double2D(566.4295059128144,65.19712466652291));
    	lti_positions.add(new Double2D(580.5208628872699,106.18250898577138));
    	lti_positions.add(new Double2D(216.43930433668282,82.01094309415816));
    	lti_positions.add(new Double2D(177.01463478393947,217.41980153412922));
    	lti_positions.add(new Double2D(563.6096790808516,70.1547925710728));
    	lti_positions.add(new Double2D(196.31815049080615,146.29130225702303));
    	lti_positions.add(new Double2D(92.07774409693978,8.559395503589672));
    	lti_positions.add(new Double2D(438.26746374673104,116.84685511244811));
    	lti_positions.add(new Double2D(507.68178396481386,7.715921544259976));
    	lti_positions.add(new Double2D(379.74270747651195,150.93775878258984));
    	lti_positions.add(new Double2D(318.8172590161132,158.48463160559132));
    	lti_positions.add(new Double2D(223.77135102076286,190.81211904773872));
    	lti_positions.add(new Double2D(30.91263359894645,180.86146446567363));
    	lti_positions.add(new Double2D(334.11746077794106,74.59543767233522));
    	lti_positions.add(new Double2D(566.4102206925623,81.25031156228727));
    	lti_positions.add(new Double2D(287.5321450460687,248.41590260485643));
    	lti_positions.add(new Double2D(210.43544973034588,183.92741869738953));
    	lti_positions.add(new Double2D(143.16637223596942,164.38777670341318));
    	lti_positions.add(new Double2D(465.3474856732871,19.956353459345305));
    	lti_positions.add(new Double2D(499.54879291533814,200.60778388868565));
    	lti_positions.add(new Double2D(451.64203556819274,249.4864043669128));
    	lti_positions.add(new Double2D(298.32461765395067,75.3122606414128));
    	lti_positions.add(new Double2D(550.046069003345,233.08406625269703));
    	lti_positions.add(new Double2D(178.32750297248944,213.70058999008265));
    	lti_positions.add(new Double2D(181.5619117230818,203.54378916562877));
    	lti_positions.add(new Double2D(630.8700057383442,250.69805867282977));
    	lti_positions.add(new Double2D(182.31193990202343,208.68101760817783));
    	lti_positions.add(new Double2D(383.01363632231727,18.26936523249106));
    	lti_positions.add(new Double2D(77.47148082487192,109.46275085617225));
    	lti_positions.add(new Double2D(304.37047598786137,125.80592950813458));
    	lti_positions.add(new Double2D(468.04812005794975,68.45688199207828));
    	lti_positions.add(new Double2D(587.8553160053235,148.84236518533024));
    	lti_positions.add(new Double2D(666.5807712944812,179.25670386291407));
    	lti_positions.add(new Double2D(384.160809902723,4.199743510946423));
    	lti_positions.add(new Double2D(546.8675649272719,203.70021411399694));
    	lti_positions.add(new Double2D(647.7458289905135,22.845988461133743));
    	lti_positions.add(new Double2D(499.1907875454925,203.05363050024326));
    	lti_positions.add(new Double2D(515.2430704536453,186.8520462504514));
    	lti_positions.add(new Double2D(411.71142915837964,28.489007110736633));
    	lti_positions.add(new Double2D(255.67499803004958,53.76020582222167));
    	lti_positions.add(new Double2D(164.80828259874167,212.0701461173808));
    	lti_positions.add(new Double2D(300.9566565903269,220.31807406173945));
    	lti_positions.add(new Double2D(271.7383838773083,104.03377745013395));
    	lti_positions.add(new Double2D(574.9946284622131,24.830710805074286));
    	lti_positions.add(new Double2D(291.0902316619555,178.63687628077267));
    	lti_positions.add(new Double2D(530.5939092091791,151.0796599054151));
    	lti_positions.add(new Double2D(345.04473793045014,159.42728025782228));
    	lti_positions.add(new Double2D(89.37441286415088,118.50153570066097));
    	lti_positions.add(new Double2D(191.8431008871751,18.032514399464134));
    	lti_positions.add(new Double2D(434.4707762000617,184.17340406475904));
    	lti_positions.add(new Double2D(82.36317101902925,35.88065196478932));
    	lti_positions.add(new Double2D(400.6826668150153,245.6373583625498));
    	lti_positions.add(new Double2D(237.33063240985226,144.272924868637));
    	lti_positions.add(new Double2D(99.435905063607,116.94403030343146));
    	lti_positions.add(new Double2D(305.35794979573166,54.876741781925205));
    	lti_positions.add(new Double2D(316.7034893732523,246.0130708072812));
    	lti_positions.add(new Double2D(115.5782734541819,191.14504917273965));
    	lti_positions.add(new Double2D(159.03571248215968,171.05666578856767));
    	lti_positions.add(new Double2D(407.79151182742595,181.5643083171423));
    	lti_positions.add(new Double2D(582.8181895247269,141.73364467703524));
    	lti_positions.add(new Double2D(243.05711749323652,253.00191093322516));
    	lti_positions.add(new Double2D(601.5253599557997,78.66764517857393));
    	lti_positions.add(new Double2D(449.8904061633673,146.08193186222775));
    	lti_positions.add(new Double2D(466.13356270358054,164.33622792009953));
    	lti_positions.add(new Double2D(670.0316819847214,79.17766296024557));
    	lti_positions.add(new Double2D(104.97158562342665,155.38149588987793));
    	lti_positions.add(new Double2D(682.8153118821191,182.38337355607197));
    	lti_positions.add(new Double2D(332.68195971279494,137.2640022851376));
    	lti_positions.add(new Double2D(203.6106222349673,13.809174149079942));
    	lti_positions.add(new Double2D(377.824353188535,248.13071057358806));
    	lti_positions.add(new Double2D(693.4724860158051,47.30438719691046));
    	lti_positions.add(new Double2D(576.922582962807,30.85908035720422));
    	lti_positions.add(new Double2D(177.66145491972978,32.024341313793954));
    	lti_positions.add(new Double2D(339.6887039841959,161.70055064862322));
    	lti_positions.add(new Double2D(100.62519655657108,181.0979461630041));
    	lti_positions.add(new Double2D(126.41043568665381,203.72125413745897));
    	lti_positions.add(new Double2D(55.418502526398925,128.3900397549646));
    	lti_positions.add(new Double2D(543.9831538702092,167.72322883941752));
    	lti_positions.add(new Double2D(107.5835689241852,63.574228608080944));
    	lti_positions.add(new Double2D(306.1850786209796,122.5479677917496));
    	lti_positions.add(new Double2D(213.52336173563202,109.42194265155113));
    	lti_positions.add(new Double2D(496.15317988818066,63.06476635436053));
    	lti_positions.add(new Double2D(126.99679118805676,98.47968671685558));
    	lti_positions.add(new Double2D(515.2035194848759,100.46539409149774));
    	lti_positions.add(new Double2D(387.85208021313315,30.47386939808354));
    	lti_positions.add(new Double2D(339.80682553436736,173.51149349005397));
    	lti_positions.add(new Double2D(244.35792638458187,81.6855873465467));
    	lti_positions.add(new Double2D(330.4764272570606,236.13587098113672));
    	lti_positions.add(new Double2D(59.64399491361381,240.28612270365028));
    	lti_positions.add(new Double2D(449.1409545399082,76.76086078526068));
    	lti_positions.add(new Double2D(244.85301055098031,4.379666494976699));
    	lti_positions.add(new Double2D(181.70471549550382,210.67897460925818));
    	lti_positions.add(new Double2D(418.79274759007086,50.31108356397734));
    	lti_positions.add(new Double2D(260.99307479653714,129.10942144770692));
    	lti_positions.add(new Double2D(389.5905461334162,108.5352122496281));
    	lti_positions.add(new Double2D(393.8872409456154,44.05250779532305));
    	lti_positions.add(new Double2D(652.591015895899,201.79057392580916));
    	lti_positions.add(new Double2D(290.4338531024605,125.87422308140783));
    	lti_positions.add(new Double2D(556.7201353629653,196.78235086029412));
    	lti_positions.add(new Double2D(379.3606625546894,114.2709810200385));
    	lti_positions.add(new Double2D(616.221178767486,8.722193606798477));
    	lti_positions.add(new Double2D(45.2747120142324,153.55730122820776));
    	lti_positions.add(new Double2D(549.784327745653,83.71272296852457));
    	lti_positions.add(new Double2D(388.1886083586599,119.80692599802));
    	lti_positions.add(new Double2D(474.8350409653897,139.20510432577478));
    	lti_positions.add(new Double2D(465.5790108843524,230.73447873560517));
    	lti_positions.add(new Double2D(457.8771711143774,75.34314963534406));
    	lti_positions.add(new Double2D(607.4392866440427,18.811265405985765));
    	lti_positions.add(new Double2D(220.30057080056073,19.261449203141872));
    	lti_positions.add(new Double2D(134.32482843487782,95.32112098601026));
    	lti_positions.add(new Double2D(551.8197179496381,203.6250687098757));
    	lti_positions.add(new Double2D(217.8289671622993,130.18843644006424));
    	lti_positions.add(new Double2D(644.647940537711,2.2161191895446084));
    	lti_positions.add(new Double2D(234.56619765558278,133.46361511035238));
    	lti_positions.add(new Double2D(591.7114809007711,188.3730637772518));
    	lti_positions.add(new Double2D(195.94275115740766,32.09381255320053));
    	lti_positions.add(new Double2D(72.96993830122787,189.11747710093496));
    	lti_positions.add(new Double2D(292.52279363654145,253.48344344836005));
    	lti_positions.add(new Double2D(469.23791945167346,51.745105275164704));
    	lti_positions.add(new Double2D(287.1272813914754,249.15294752212387));
    	lti_positions.add(new Double2D(598.8604529716692,119.91582882554896));
    	lti_positions.add(new Double2D(385.312917708995,102.60410898305885));
    	lti_positions.add(new Double2D(189.09576979421416,78.64089027596737));
    	lti_positions.add(new Double2D(521.4858218476282,114.6178459578182));
    	lti_positions.add(new Double2D(131.64593287777586,13.389316144332735));
    	lti_positions.add(new Double2D(335.31788039616447,128.54511278422228));
    	lti_positions.add(new Double2D(184.6167360377287,72.10248821043275));
    	lti_positions.add(new Double2D(419.08322132583254,31.626862994512592));
    	lti_positions.add(new Double2D(475.8477995498761,61.692799826515895));
    	lti_positions.add(new Double2D(238.00521647533475,200.23427696324043));
    	lti_positions.add(new Double2D(393.61489540303637,6.07511624171012));
    	lti_positions.add(new Double2D(138.8063323588116,34.12033038354841));
    	lti_positions.add(new Double2D(99.34758407604754,242.01228678995508));
    	lti_positions.add(new Double2D(246.37976202322608,220.668177680348));
    	lti_positions.add(new Double2D(12.85657895753587,65.96017715690826));
    	lti_positions.add(new Double2D(597.4380173367808,206.7194878247472));
    	lti_positions.add(new Double2D(37.6303156916423,161.994952683419));
    	lti_positions.add(new Double2D(350.097002799955,200.1212577833037));
    	lti_positions.add(new Double2D(686.5788241252399,190.5297211701276));
    	lti_positions.add(new Double2D(542.411364887531,160.42726979646892));
    	lti_positions.add(new Double2D(233.67512103296642,240.72222377354007));
    	lti_positions.add(new Double2D(511.7148738185438,174.17187309275266));
    	lti_positions.add(new Double2D(522.7835575196843,243.181805322712));
    	lti_positions.add(new Double2D(205.22935064300594,162.75104035203898));
    	lti_positions.add(new Double2D(698.1835307580274,52.71951989584681));
    	lti_positions.add(new Double2D(124.06386533740995,49.849918590281284));
    	lti_positions.add(new Double2D(570.9495259716368,147.39770223524465));
    	lti_positions.add(new Double2D(564.9756981392853,225.38568984172673));
    	lti_positions.add(new Double2D(78.446691622405,249.65685067942792));
    	lti_positions.add(new Double2D(426.725145367652,180.4356230081149));
    	lti_positions.add(new Double2D(52.14364884832482,69.49703908707419));
    	lti_positions.add(new Double2D(280.9560538345566,173.58757384513117));
    	lti_positions.add(new Double2D(373.496407379864,111.96345464537823));
    	lti_positions.add(new Double2D(555.5575572559003,190.17277864562016));
    	lti_positions.add(new Double2D(662.9711180298358,51.40713327747512));
    	lti_positions.add(new Double2D(89.70406205664273,244.02694819049532));
    	lti_positions.add(new Double2D(479.6260068997335,159.49099014515423));
    	lti_positions.add(new Double2D(27.441450823525315,154.27624432105435));
    	lti_positions.add(new Double2D(488.099182750464,20.258610725801073));
    	lti_positions.add(new Double2D(107.50241967227426,240.62561759994594));
    	lti_positions.add(new Double2D(657.2158871068057,129.4461735413694));
    	lti_positions.add(new Double2D(256.88346664379907,13.721216399635349));
    	lti_positions.add(new Double2D(429.8633988068518,125.92229169027074));
    	lti_positions.add(new Double2D(401.0568351490007,248.5551626176303));
    	lti_positions.add(new Double2D(150.47187606979952,178.28116378684985));
    	lti_positions.add(new Double2D(446.5865520075262,154.79344365683312));
    	lti_positions.add(new Double2D(326.01568135462315,136.96582830934406));
    	lti_positions.add(new Double2D(281.02918224756144,99.96961454467885));
    	lti_positions.add(new Double2D(293.9660694713147,206.53576025611838));
    	lti_positions.add(new Double2D(221.4740695089844,202.62756001476168));
    	lti_positions.add(new Double2D(603.8204358267106,7.534870920585785));
    	lti_positions.add(new Double2D(298.01748967570404,7.293097454265717));
    	lti_positions.add(new Double2D(316.33932853773723,131.09357968876535));
    	lti_positions.add(new Double2D(402.31785089206556,17.870252886310634));
    	lti_positions.add(new Double2D(326.3549596227184,196.24506133478863));
    	lti_positions.add(new Double2D(257.313244461094,11.6930094532817));
    	lti_positions.add(new Double2D(223.54787307717956,87.08027928447363));
    	lti_positions.add(new Double2D(410.2842287640085,236.8371130416346));
    	lti_positions.add(new Double2D(600.3738029451828,30.450478439471656));
    	lti_positions.add(new Double2D(115.75398613147937,27.688010138566398));
    	lti_positions.add(new Double2D(393.8758428628691,125.25088922261584));
    	lti_positions.add(new Double2D(138.00442556633587,142.499120113264));
    	lti_positions.add(new Double2D(55.61551348237002,137.40157914687742));
    	lti_positions.add(new Double2D(506.9025178608196,11.782216640878174));
    	lti_positions.add(new Double2D(591.7083565474102,123.24789051470704));
    	lti_positions.add(new Double2D(0.6453867198105367,138.3040097588891));
    	lti_positions.add(new Double2D(189.64510311866493,127.708785503697));
    	lti_positions.add(new Double2D(268.7436236615785,148.48490030110133));
    	lti_positions.add(new Double2D(56.69434910577502,210.93826979437767));
    	lti_positions.add(new Double2D(145.65682972228768,186.11552694002123));
    	lti_positions.add(new Double2D(56.83858559474891,128.3563364957467));
    	lti_positions.add(new Double2D(164.86300475347184,72.30049137652563));
    	lti_positions.add(new Double2D(605.3497356898201,140.1323507329102));
    	lti_positions.add(new Double2D(511.2956780936401,78.32174923467942));
    	lti_positions.add(new Double2D(303.0720172087807,56.047190391549236));
    	lti_positions.add(new Double2D(349.3080460400136,78.24642885414646));
    	lti_positions.add(new Double2D(374.0609781157456,41.14278865567769));
    	lti_positions.add(new Double2D(297.1952085421901,22.167148918011545));
    	lti_positions.add(new Double2D(321.96223098225386,161.3620949932573));
    	lti_positions.add(new Double2D(526.1344220867103,194.08412842707924));
    	lti_positions.add(new Double2D(491.43624438788834,44.87448075720776));
    	lti_positions.add(new Double2D(180.40731510306532,104.76332272844141));
    	lti_positions.add(new Double2D(55.82946591561465,180.2754112449655));
    	lti_positions.add(new Double2D(412.55716923764516,159.25754860995767));
    	lti_positions.add(new Double2D(667.4939479916512,244.38920859200317));
    	lti_positions.add(new Double2D(277.38131143674997,45.033212551517515));
    	lti_positions.add(new Double2D(359.7370702002675,16.908164413053143));
    	lti_positions.add(new Double2D(113.53260322618077,116.67515108064805));
    	lti_positions.add(new Double2D(414.10836996965025,51.05338579937307));
    	lti_positions.add(new Double2D(170.09775022632613,16.65200107795435));
    	lti_positions.add(new Double2D(622.9024319414708,231.43911079691313));
    	lti_positions.add(new Double2D(275.1801588891917,188.19632926601477));
    	lti_positions.add(new Double2D(404.79754643202415,198.33067511604915));
    	lti_positions.add(new Double2D(638.4071137318501,157.2137011138814));
    	lti_positions.add(new Double2D(543.1986189685656,134.60900464806977));
    	lti_positions.add(new Double2D(670.3429352659483,153.48567863457683));
    	lti_positions.add(new Double2D(603.6276268632524,67.49000467947195));
    	lti_positions.add(new Double2D(4.368744134288704,189.12524028687028));
    	lti_positions.add(new Double2D(251.51336135496166,229.31617095152794));
    	lti_positions.add(new Double2D(404.14171300858936,18.06388341338514));
    	lti_positions.add(new Double2D(617.0842197527454,41.52741165464889));
    	lti_positions.add(new Double2D(419.4932691449906,36.010989515058725));
    	lti_positions.add(new Double2D(25.074424281504193,231.81866107698883));
    	lti_positions.add(new Double2D(283.8804125294554,1.3012547681313535));
    	lti_positions.add(new Double2D(129.84002298373707,30.477507159097406));
    	lti_positions.add(new Double2D(30.89102410743545,166.11682023364077));
    	lti_positions.add(new Double2D(221.1529055252453,26.745622517357404));
    	lti_positions.add(new Double2D(321.87671298914773,177.86455419081025));
    	lti_positions.add(new Double2D(397.6013401833795,196.85402538987006));
    	lti_positions.add(new Double2D(331.28976393017973,247.78194727592088));
    	lti_positions.add(new Double2D(344.25218768481034,63.17685309353745));
    	lti_positions.add(new Double2D(408.7439915883178,15.384128027890021));
    	lti_positions.add(new Double2D(143.82883201358388,217.5008270720242));
    	lti_positions.add(new Double2D(360.08216760777435,64.85137247859821));
    	lti_positions.add(new Double2D(537.5488747701279,76.71688086613938));
    	lti_positions.add(new Double2D(248.42950147722397,237.53357622950787));
    	lti_positions.add(new Double2D(65.54888500236403,86.52422775556951));
    	lti_positions.add(new Double2D(616.2780883641218,55.184056442279086));
    	lti_positions.add(new Double2D(686.5805136797362,121.62896755428746));
    	lti_positions.add(new Double2D(126.59638936803252,151.54159614962757));
    	lti_positions.add(new Double2D(256.4524995193595,230.95908296829614));
    	lti_positions.add(new Double2D(418.55176787571395,249.44827257152457));
    	lti_positions.add(new Double2D(342.0450273925354,138.11616796789974));
    	lti_positions.add(new Double2D(222.15342677605994,122.9979465846));
    	lti_positions.add(new Double2D(161.44173202268388,214.5715664188459));
    	lti_positions.add(new Double2D(188.11892236724805,192.93444967005377));
    	lti_positions.add(new Double2D(446.3102047188872,143.27827333937125));
    	return(lti_positions);
    }
}

